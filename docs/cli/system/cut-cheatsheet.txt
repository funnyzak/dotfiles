##############################################################################
# cut 命令速查表 (cut Command Cheatsheet)
# https://github.com/funnyzak/dotfiles
##############################################################################

# 图例 (Legend):
#   - DELIMITER:  字段分隔符 (Field delimiter, 例如: ',', ':', '\t', ' ')
#   - FIELD:    字段编号 (Field number, 例如: 1, 2, 3...)，从 1 开始计数
#   - COLUMN:   字符位置 (Character position, 例如: 1, 2, 3...)，从 1 开始计数
#   - RANGE:    范围表示 (Range, 例如: 'n-', '-m', 'n-m', 'n,m,p')
#   - FILE:     输入文件路径 (Input file path)

##############################################################################
# 基本用法 (Basic Usage)
##############################################################################

cut -f FIELD[,FIELD,...] -d DELIMITER FILE      # 按字段切割文件 (指定分隔符)
cut -f FIELD[,FIELD,...] FILE                    # 按字段切割文件 (默认 Tab 分隔符)
cut -c COLUMN[,COLUMN,...] FILE                 # 按字符位置切割文件
cut -b BYTE[,BYTE,...] FILE                     # 按字节位置切割文件 (处理特殊字符可能不准确)

# 选项解释:
#   - -f, --fields=LIST          选择要提取的字段 (字段列表，逗号分隔)
#   - -d, --delimiter=DELIM      指定字段分隔符，默认为 Tab
#   - -c, --characters=LIST      选择要提取的字符位置 (字符位置列表，逗号分隔)
#   - -b, --bytes=LIST           选择要提取的字节位置 (字节位置列表，逗号分隔)

##############################################################################
# 字段选择 (Field Selection - -f)
##############################################################################

cut -f 1 -d ':' /etc/passwd                   # 获取 /etc/passwd 文件每行的第一个字段 (以 ':' 分隔)
cut -f 1,3 -d ',' data.csv                   # 获取 CSV 文件每行的第 1 和第 3 个字段 (以 ',' 分隔)
cut -f 2-4 -d ' ' log.txt                     # 获取日志文件每行的第 2 到第 4 个字段 (以 ' ' 分隔)
cut -f 3- -d ';' data.txt                     # 获取数据文件每行第 3 个字段之后的所有字段 (以 ';' 分隔)
cut -f -2 -d ' ' header.txt                   # 获取文件每行第 2 个字段之前的所有字段 (包括第 2 个字段, 以 ' ' 分隔)

# 字段范围表示 (Field Range):
#   - n         第 n 个字段
#   - n,m       第 n 和第 m 个字段
#   - n-m       第 n 到第 m 个字段 (包含 n 和 m)
#   - n-        第 n 个字段到行尾
#   - -m        第 1 个字段到第 m 个字段 (包含 m)

##############################################################################
# 字符选择 (Character Selection - -c)
##############################################################################

cut -c 1-10 text.txt                         # 获取文件每行前 10 个字符
cut -c 5 text.txt                            # 获取文件每行第 5 个字符
cut -c 1,5,10 text.txt                       # 获取文件每行第 1, 5, 10 个字符
cut -c 10- text.txt                          # 获取文件每行第 10 个字符之后的所有字符
cut -c -5 text.txt                           # 获取文件每行前 5 个字符 (包括第 5 个字符)

# 字符范围表示 (Character Range):
#   - n         第 n 个字符
#   - n,m       第 n 和第 m 个字符
#   - n-m       第 n 到第 m 个字符 (包含 n 和 m)
#   - n-        第 n 个字符到行尾
#   - -m        第 1 个字符到第 m 个字符 (包含 m)

##############################################################################
# 字节选择 (Byte Selection - -b)
##############################################################################

cut -b 1-5 file.txt                          # 获取文件每行前 5 个字节 (可能截断多字节字符)
cut -b 1,3,5 file.txt                        # 获取文件每行第 1, 3, 5 个字节

# 注意:
#   - 字节选择可能在处理多字节字符 (如 UTF-8 编码的中文) 时出现问题，导致字符被截断。
#   - 建议在处理文本时优先使用 `-c` 字符选择。

##############################################################################
# 分隔符 (Delimiters - -d)
##############################################################################

cut -f 2 -d ':' /etc/passwd                   # 使用 ':' 作为分隔符
cut -f 1 -d ',' data.csv                     # 使用 ',' 作为分隔符
cut -f 3 -d ' ' log.txt                       # 使用空格 ' ' 作为分隔符 (注意空格需要引号包裹)
cut -f 1 -d "$(printf '\t')" data.tsv         # 使用 Tab 字符作为分隔符 (使用 printf 生成 Tab)

# 注意:
#   - 分隔符必须是单个字符。
#   - 对于空格作为分隔符，需要用引号 ` ' ' ` 包裹，或者使用 `$'\ '` (Bash 扩展)。
#   - 对于 Tab 字符，可以使用 `$'\t'` (Bash 扩展) 或 `$(printf '\t')`。

##############################################################################
# 输出分隔符 (--output-delimiter)
##############################################################################

cut -f 1,3 -d ':' --output-delimiter='|' /etc/passwd  # 输出字段间用 '|' 分隔

# 选项解释:
#   - --output-delimiter=STRING  指定输出字段分隔符，默认为输入分隔符 (字段模式)

##############################################################################
# 补集 (Complement - --complement)
##############################################################################

cut -f 1,3 --complement -d ':' /etc/passwd  # 输出除了第 1 和第 3 字段以外的所有字段

# 选项解释:
#   - --complement              取补集，即选择指定范围 *以外* 的字段/字符/字节

##############################################################################
# 实用技巧 (Tips and Tricks)
##############################################################################

# 结合管道 (|) 使用:
#   ls -l | cut -c 1-10                     # 列出文件列表，并截取每行前 10 个字符 (权限部分)
#   ps aux | cut -f 1,2 -d ' '              # 列出进程信息，并截取 PID 和 COMMAND (空格分隔)

# 处理空格分隔的文本 (多个空格作为单个分隔符):
#   tr -s ' ' < space.txt | cut -f 1,3 -d ' '  # 先用 tr -s ' ' 压缩空格，再用 cut 处理

# 结合其他命令 (sort, uniq, awk, sed 等):
#   cat data.txt | sort | uniq | cut -f 1 -d ',' # 数据处理流水线

##############################################################################
# 示例 (Examples)
##############################################################################

# 示例 1: 从 CSV 文件中提取姓名和城市 (逗号分隔)
#   文件: names.csv
#   内容:
#     Name,Age,City,Country
#     Alice,30,New York,USA
#     Bob,25,London,UK
#   命令:
#     cut -f 1,3 -d ',' names.csv
#   输出:
#     Name,City
#     Alice,New York
#     Bob,London

# 示例 2: 从日志文件中提取日期和 IP 地址 (空格分隔)
#   文件: access.log
#   内容 (部分):
#     2023-10-27 10:00:00 192.168.1.100 GET /index.html
#     2023-10-27 10:01:00 192.168.1.101 POST /api/data
#   命令:
#     cut -f 1,3 -d ' ' access.log
#   输出:
#     2023-10-27 192.168.1.100
#     2023-10-27 192.168.1.101

##############################################################################
# 更多信息 (More Information)
##############################################################################

# man cut  (查看 cut 命令的完整 manual)
# info coreutils 'cut invocation' (查看 GNU coreutils cut 文档)

# vim: set ts=4 sw=4 tw=0 et ft=txt :
