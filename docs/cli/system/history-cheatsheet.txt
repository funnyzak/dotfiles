##############################################################################
# history 命令速查表 (history Command Cheatsheet)
# 用于查看和操作 Shell 历史命令
# https://github.com/funnyzak/dotfiles
##############################################################################

# 图例 (Legend):
#   - N:      数字，表示历史命令的序号或数量
#   - OFFSET: 偏移量，用于指定从哪个位置开始显示
#   - STRING: 字符串，用于搜索历史命令

##############################################################################
# 显示历史命令 (Display History)
##############################################################################

history                                     # 显示所有历史命令 (带序号)
history N                                   # 显示最近 N 条历史命令
history OFFSET                              # 从序号为 OFFSET 的命令开始显示
history OFFSET N                            # 显示从 OFFSET 开始的 N 条命令
history -c                                  # 清空当前会话的历史命令 (内存中)
history -d OFFSET                             # 删除指定序号 OFFSET 的历史命令
history -an                                 # 追加新的历史命令到历史文件，并读取到当前会话

# 提示:
#   - 默认情况下，history 命令会显示行号。
#   - 历史命令的序号可能会因为会话或配置而有所不同。

##############################################################################
# 搜索历史命令 (Search History)
##############################################################################

history | grep STRING                         # 搜索包含 STRING 的历史命令
history | awk '/STRING/'                      # 使用 awk 搜索 (更灵活)
Ctrl + r  然后输入关键词                     # 反向搜索历史命令 (交互式)

# 提示:
#   - `grep` 和 `awk` 可以使用正则表达式进行更复杂的搜索。
#   - Ctrl+r 是非常方便的交互式搜索方式。

##############################################################################
# 执行历史命令 (Execute History Command)
##############################################################################

!N                                          # 执行序号为 N 的历史命令
!-N                                         # 执行倒数第 N 条历史命令
!!                                          # 执行上一条历史命令
!STRING                                      # 执行最近一条以 STRING 开头的历史命令
!?STRING[?]                                   # 执行最近一条包含 STRING 的历史命令
^OLD^NEW^                                    # 将上一条命令中的 OLD 替换为 NEW 并执行
$_                                          # 上一条命令的最后一个参数

# 提示:
#   - 感叹号 (!) 开头用于执行历史命令。
#   - `!?STRING?` 在一些 Shell 中可能需要开启 `histverify` 选项。
#   - `$_` 在脚本中非常有用，可以复用上一条命令的参数。

##############################################################################
# 历史命令文件 (History File Management)
##############################################################################

# 历史命令默认保存在 ~/.bash_history (Bash) 或 ~/.zsh_history (Zsh) 等文件中
# 环境变量 HISTFILE 指定历史文件路径
# 环境变量 HISTSIZE  指定内存中保存的最大历史命令数
# 环境变量 HISTFILESIZE 指定历史文件中保存的最大行数
# 环境变量 HISTCONTROL 控制历史命令的记录方式 (例如: ignorespace, ignoredups, ignoreboth)

# 提示:
#   - 可以通过修改环境变量来定制历史命令的行为。
#   - `shopt -s histappend` (Bash) 可以设置追加历史命令到文件，而不是覆盖。

##############################################################################
# 实用技巧 (Tips and Tricks)
##############################################################################

# 快速重复执行上一条命令:
#   !!
#   或按向上箭头键再回车

# 清理包含敏感信息的历史命令 (小心操作):
#   history | grep "敏感词"  # 查找敏感命令的序号
#   history -d 序号          # 删除敏感命令
#   history -c && history -w  # 清空内存历史并写入文件 (慎用，会丢失当前会话所有历史)

# 避免记录某些命令到历史 (例如密码输入):
#   在命令前加一个空格 (如果 HISTCONTROL 包含 ignorespace)
#   export HISTCONTROL=ignorespace  # 设置忽略以空格开头的命令

##############################################################################
# 示例 (Examples)
##############################################################################

# 显示最近 10 条命令:
#   history 10

# 执行序号为 123 的命令:
#   !123

# 执行上一条命令并替换 "foo" 为 "bar":
#   ^foo^bar^

# 搜索并执行包含 "git commit" 的命令 (交互式):
#   Ctrl + r  输入 git commit  然后回车

##############################################################################
# 鸣谢 & 更多资源 (Credit & Further Resources)
##############################################################################

# Bash 官方文档:
#   https://www.gnu.org/software/bash/manual/bash.html#Bash-History-Facilities
# Zsh 官方文档:
#   https://zsh.sourceforge.io/Doc/Release/Zsh-History.html

# vim: set ts=4 sw=4 tw=0 et ft=txt :
