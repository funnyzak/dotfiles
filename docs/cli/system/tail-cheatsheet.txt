##############################################################################
# tail 命令速查表 (tail Command Cheatsheet)
# 用于显示文件尾部内容
# https://github.com/funnyzak/dotfiles
##############################################################################

# 图例 (Legend):
#   - FILE:   文件路径 (File path)
#   - LINES:  行数 (Number of lines)
#   - OFFSET: 偏移量 (Offset from start or end)
#   - NAME:   文件名 (File name)

##############################################################################
# 基本用法 (Basic Usage)
##############################################################################

tail FILE                                   # 显示 FILE 文件末尾 10 行
tail -n LINES FILE                           # 显示 FILE 文件末尾 LINES 行
tail -n +LINES FILE                          # 从 FILE 文件第 LINES 行开始显示到末尾 (LINES 起始行)
tail -c BYTES FILE                           # 显示 FILE 文件末尾 BYTES 字节
tail -c +BYTES FILE                          # 从 FILE 文件第 BYTES 字节开始显示到末尾 (BYTES 起始字节)

# 提示:
#   - 不指定 FILE 时，从标准输入读取
#   - LINES 或 BYTES 前加 '+' 表示从指定位置开始，否则表示显示末尾指定数量

##############################################################################
# 跟踪文件 (Following Files)
##############################################################################

tail -f FILE                                   # 跟踪 FILE 文件新追加的内容 (持续输出)
tail --follow=name FILE                       # 按文件名跟踪 (文件被替换后继续跟踪新文件)
tail --follow=descriptor FILE                 # 按文件描述符跟踪 (文件被替换后停止跟踪)
tail -F FILE                                   # 等同于 '--follow=name --retry'，文件不可访问时重试

# 提示:
#   - 默认情况下，-f 等同于 --follow=descriptor
#   - 使用 Ctrl+C 停止跟踪 (-f 或 -F)

##############################################################################
# 处理多个文件 (Handling Multiple Files)
##############################################################################

tail FILE1 FILE2 FILE3                       # 显示 FILE1, FILE2, FILE3 文件末尾各 10 行
tail -n LINES FILE1 FILE2 FILE3              # 显示 FILE1, FILE2, FILE3 文件末尾各 LINES 行
tail -f FILE1 FILE2                          # 同时跟踪 FILE1 和 FILE2 文件

# 提示:
#   - 当有多个文件时，默认会在每个文件输出前添加文件名头部
#   - 可以使用 -q 或 --quiet/--silent 选项禁止输出文件名头部
#   - 可以使用 -v 或 --verbose 选项强制输出文件名头部

##############################################################################
# 输出控制 (Output Control)
##############################################################################

tail -q FILE                                   # 不输出文件名头部 (静默模式)
tail -v FILE                                   # 总是输出文件名头部 (即使只有一个文件)
tail -s SECONDS -f FILE                       # 配合 -f 使用，每 SECONDS 秒检查一次更新 (默认 1 秒)

# 提示:
#   - -s 选项可以减少 CPU 占用，特别是在跟踪更新频繁的文件时

##############################################################################
# 实用技巧 (Tips and Tricks)
##############################################################################

# 结合 grep 过滤输出:
#   tail -f logfile.log | grep "error"        # 实时跟踪日志并过滤错误信息

# 显示指定行范围 (结合 head 和 tail):
#   head -n 20 file.txt | tail -n 10           # 显示文件 11-20 行 (先取前20行，再取后10行)

# 从指定偏移量开始读取并跟踪:
#   tail -c +1000 -f largefile.log             # 从文件 1000 字节后开始跟踪

# 监控多个日志文件，并显示文件名:
#   tail -f -v access.log error.log slow.log  # 监控多个日志并显示文件名头部

##############################################################################
# 示例 (Examples)
##############################################################################

# 实时监控 web 服务器访问日志，并过滤 404 错误:
#   tail -f /var/log/nginx/access.log | grep " 404 "

# 查看系统日志末尾 20 行:
#   tail -n 20 /var/log/syslog

# 跟踪一个不断增长的日志文件，每 5 秒检查一次更新:
#   tail -s 5 -f myapp.log

##############################################################################
# 鸣谢 & 更多资源 (Credit & Further Resources)
##############################################################################

# GNU coreutils 官方文档: https://www.gnu.org/software/coreutils/manual/html_node/tail-invocation.html
# `man tail` 命令 (在终端中查看 tail 命令的帮助文档)

# vim: set ts=4 sw=4 tw=0 et ft=txt :
