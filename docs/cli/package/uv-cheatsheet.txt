##############################################################################
# uv 命令速查表 (uv Command Cheatsheet)
# 快速的 Python 包安装器和解析器
# GitHub: https://github.com/funnyzak/dotfiles
##############################################################################

# 图例 (Legend):
#   - PKG:  Python 包名 (Package name, 例如: requests, numpy)
#   - VERSION: 版本号或版本范围 (Version number or range, 例如: ==2.28.1, >=3.7)
#   - PATH: 文件或目录路径 (File or directory path)
#   - VENV_NAME: 虚拟环境名称 (Virtual environment name, 例如: .venv, myenv)
#   - INDEX_URL: PyPI 镜像地址 (PyPI mirror URL, 例如: https://pypi.tuna.tsinghua.edu.cn/simple)

##############################################################################
# 基础操作 (Basic Operations)
##############################################################################

uv --help                                      # 显示帮助信息
uv --version                                   # 显示 uv 版本

##############################################################################
# 包管理 (Package Management)
##############################################################################

uv pip install PKG                              # 安装包 (最新版本)
uv pip install PKG==VERSION                      # 安装指定版本
uv pip install PKG>=VERSION                      # 安装指定版本范围
uv pip install -r requirements.txt              # 从 requirements.txt 安装
uv pip install .                               # 安装当前目录的包 (setup.py 或 pyproject.toml)
uv pip install PATH                             # 安装本地包 (wheel 文件或目录)
uv pip install -i INDEX_URL PKG                  # 从指定 PyPI 镜像安装
uv pip install --index-url INDEX_URL PKG        # 同上，更明确的写法

uv pip uninstall PKG                            # 卸载包

uv pip list                                    # 列出已安装的包
uv pip show PKG                                 # 显示包的详细信息
uv pip check                                   # 检查已安装包的依赖冲突

uv pip cache dir                               # 显示 uv 缓存目录
uv pip cache purge                             # 清空 uv 缓存

# 提示:
#   - uv 默认使用虚拟环境，如未激活会自动创建 .venv
#   - 可以使用 -v 或 -vv 增加输出详细程度
#   - 环境变量 `PIP_INDEX_URL` 可全局设置 PyPI 镜像

##############################################################################
# 虚拟环境管理 (Virtual Environment Management)
##############################################################################

uv venv [VENV_NAME]                             # 创建虚拟环境 (默认 .venv)
uv venv create [VENV_NAME]                        # 显式创建虚拟环境
uv venv activate [VENV_NAME]                      # 激活虚拟环境 (不同 Shell 命令不同)
uv venv deactivate                               # 停用虚拟环境

# 提示:
#   - 激活虚拟环境后，后续的 pip install 等操作将在该环境中进行
#   - 建议在项目根目录创建虚拟环境
#   - 激活脚本示例:
#     - bash/zsh: `source .venv/bin/activate` 或 `. .venv/bin/activate`
#     - fish:     `. .venv/bin/activate.fish`
#     - powershell: `.venv/Scripts/Activate.ps1`
#     - cmd:      `.venv\Scripts\activate.bat`

##############################################################################
# 依赖管理 (Dependency Management)
##############################################################################

uv pip freeze > requirements.txt                  # 生成 requirements.txt
uv pip compile requirements.in -o requirements.txt # 从 requirements.in 编译 requirements.txt (高级)
uv pip sync                                    # 同步虚拟环境到 requirements.txt (高级)

# 提示:
#   - requirements.txt 用于记录项目依赖，方便环境复现
#   - compile 和 sync 命令用于更复杂的依赖管理场景
#   - requirements.in 通常用于更高级的依赖约束和版本管理

##############################################################################
# 运行 Python (Running Python)
##############################################################################

uv python PATH/SCRIPT.py                        # 在 uv 环境中运行 Python 脚本
uv run PATH/SCRIPT.py                           # 别名，同上

# 提示:
#   - 确保在虚拟环境激活或使用 `uv python` 执行脚本，以使用 uv 管理的包

##############################################################################
# 配置 (Configuration)
##############################################################################

# uv 兼容 pip 的配置方式，可以通过以下方式配置:

# 1. 配置文件 (pip.conf 或 pip.ini):
#    - 全局:  通常在 `~/.config/pip/pip.conf` (Linux/macOS) 或 `%APPDATA%\pip\pip.ini` (Windows)
#    - 虚拟环境:  `.venv/pip.conf` 或 `.venv/pip.ini`
#    - 示例配置 (设置清华 PyPI 镜像源):
#      ```
#      [global]
#      index-url = https://pypi.tuna.tsinghua.edu.cn/simple
#      ```

# 2. 环境变量:
#    - `PIP_INDEX_URL`:  设置 PyPI 镜像源 (例如: `export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple`)
#    - `PIP_TRUSTED_HOST`:  配合 `PIP_INDEX_URL` 使用，信任镜像站 (例如: `export PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn`)

# 提示:
#   - 配置文件优先级高于环境变量
#   - 虚拟环境中的配置文件优先级高于全局配置文件

##############################################################################
# 示例 (Examples)
##############################################################################

# 创建并激活虚拟环境，使用清华镜像安装 requests 包，并生成 requirements.txt
#   uv venv my-project-venv
#   source my-project-venv/bin/activate
#   uv pip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests
#   uv pip freeze > requirements.txt

# 从 requirements.txt 创建虚拟环境并安装依赖 (假设 requirements.txt 已存在)
#   uv venv my-project-venv
#   uv pip install -r requirements.txt

# 全局设置清华 PyPI 镜像 (通过环境变量, 临时生效)
#   export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple
#   export PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn
#   uv pip install PKG  # 后续安装都将使用清华镜像

##############################################################################
# 鸣谢 & 更多资源 (Credit & Further Resources)
##############################################################################

# uv 官方文档:  https://docs.astral.sh/uv/
# uv GitHub 仓库: https://github.com/astral-sh/uv
# pip 官方文档 (配置参考): https://pip.pypa.io/en/stable/configuration/

# vim: set ts=4 sw=4 tw=0 et ft=txt :
