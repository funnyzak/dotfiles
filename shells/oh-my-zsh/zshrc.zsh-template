# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history z npm dotenv gitignore last-working-dir)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Load all alias files from custom/aliases directory
if [[ -d ${ZSH:-$HOME/.oh-my-zsh}/custom/aliases ]]; then
  setopt nullglob
  for alias_file in ${ZSH:-$HOME/.oh-my-zsh}/custom/aliases/*_aliases.zsh; do
    if [[ -r "$alias_file" ]]; then
      source "$alias_file"
    fi
  done
  unsetopt nullglob
fi

# Helper function to determine best remote URL prefix based on network connectivity
alias get-best-remote='() {
  echo "Get the best available remote URL prefix based on network connectivity.\nUsage:\n get-best-remote"

  local remote_url_prefix="https://raw.githubusercontent.com/funnyzak/dotfiles/refs/heads/${REPO_BRANCH:-main}/"
  local remote_url_prefix_cn="https://raw.gitcode.com/funnyzak/dotfiles/raw/${REPO_BRANCH:-main}/"

  # Check if CN mirror is accessible
  if curl -s --connect-timeout 2 "$remote_url_prefix_cn" >/dev/null 2>&1; then
    remote_url_prefix=$remote_url_prefix_cn
  fi

  echo "$remote_url_prefix"
}'

# Function to load and install ZSH plugins
alias load-zsh-plugins='() {
  echo "Load and auto-install zsh plugins if not present.\nUsage:\n load-zsh-plugins"

  local zsh_custom=${ZSH_CUSTOM:-$ZSH/custom}

  # Define plugin variables using space-separated strings
  local plugins="zsh-autosuggestions zsh-syntax-highlighting"
  local plugin_files="zsh-autosuggestions.zsh zsh-syntax-highlighting.zsh"

  # For colored message display
  local red="\033[0;31m"
  local green="\033[0;32m"
  local yellow="\033[0;33m"
  local nc="\033[0m"

  if [[ ! -d "$zsh_custom/plugins" ]]; then
    mkdir -p "$zsh_custom/plugins"
    if [[ $? -ne 0 ]]; then
      echo "Error: Failed to create plugins directory at $zsh_custom/plugins" >&2
      return 1
    fi
  fi

  # Temporary directory for downloads and extraction
  local temp_dir=$(mktemp -d)
  if [[ $? -ne 0 ]]; then
    echo "Error: Failed to create temporary directory for plugin downloads" >&2
    return 1
  fi

  # Split the space-separated strings and process each plugin
  local plugin=""
  local plugin_file=""
  local i=1

  for plugin in ${=plugins}; do
    # Extract the corresponding plugin file using cut
    plugin_file=$(echo $plugin_files | cut -d " " -f $i)
    i=$((i+1))

    local plugin_dir="$zsh_custom/plugins/$plugin"
    local plugin_path="$plugin_dir/$plugin_file"

    # Check if plugin already exists and is valid
    if [[ -d "$plugin_dir" && -f "$plugin_path" && -s "$plugin_path" ]]; then
      source "$plugin_path"
      if [[ $? -ne 0 ]]; then
        echo -e "${yellow}Warning: Failed to source plugin $plugin from $plugin_path${nc}" >&2
      fi
    else
      echo -e "${yellow}Plugin $plugin doesnt exist or is invalid, attempting to download...${nc}"

      # Get best remote URL prefix
      local remote_url="$(get-best-remote)templates/packages/zsh/plugins/${plugin}.tar.gz"
      local tarball="$temp_dir/${plugin}.tar.gz"

      # Create plugin directory
      mkdir -p "$plugin_dir"
      if [[ $? -ne 0 ]]; then
        echo -e "${red}Error: Failed to create plugin directory $plugin_dir${nc}" >&2
        continue
      fi

      # Download plugin
      echo -e "${yellow}Downloading $plugin from $remote_url...${nc}"
      if curl -sL --connect-timeout 10 --retry 3 "$remote_url" -o "$tarball"; then
        echo -e "${green}Successfully downloaded $plugin, extracting...${nc}"

        # Extract plugin to plugin directory
        if tar -xzf "$tarball" -C "$zsh_custom/plugins"; then
          echo -e "${green}Successfully extracted $plugin, loading...${nc}"

          # Check if extracted file exists
          if [[ -f "$plugin_path" && -s "$plugin_path" ]]; then
            source "$plugin_path"
            if [[ $? -ne 0 ]]; then
              echo -e "${red}Error: Failed to source plugin $plugin from $plugin_path${nc}" >&2
            fi
          else
            echo -e "${red}Error: Extracted file $plugin_path does not exist or is empty${nc}" >&2
          fi
        else
          echo -e "${red}Error: Failed to extract $plugin${nc}" >&2
        fi
      else
        echo -e "${red}Error: Failed to download $plugin, please check your network or install manually${nc}" >&2
      fi
    fi
  done

  # Clean up temporary directory
  rm -rf "$temp_dir"
  if [[ $? -ne 0 ]]; then
    echo -e "${yellow}Warning: Failed to clean up temporary directory $temp_dir${nc}" >&2
  fi
}'

# Automatically load plugins
load-zsh-plugins

# Alias to reload ZSH plugins
alias reload-zsh-plugins='() {
  echo "Reload all ZSH plugins.\nUsage:\n reload-zsh-plugins"

  load-zsh-plugins
  if [[ $? -eq 0 ]]; then
    echo "ZSH plugins successfully reloaded."
  else
    echo "Error: Failed to reload ZSH plugins." >&2
    return 1
  fi
}'

# Install oh-my-zsh alias files from remote repository
alias install-omz-aliases='() {
  echo "Install oh-my-zsh alias files from remote repository.\nUsage:\n install-omz-aliases [options]"

  echo "Installing oh-my-zsh alias files from remote repository..."
  curl -fsSL "$(get-best-remote)shells/oh-my-zsh/tools/install_omz_aliases.sh" | bash -s -- "$@"

  if [[ $? -ne 0 ]]; then
    echo "Error: Failed to install oh-my-zsh alias files." >&2
    return 1
  fi

  # Reload the configuration after installation
  source ~/.zshrc
  echo "Oh-My-Zsh aliases installed and configuration reloaded."
}'

# Upgrade oh-my-zsh configuration from remote repository
alias upgrade-zsh-config='() {
  echo "Upgrade oh-my-zsh configuration from remote repository.\nUsage:\n upgrade-zsh-config [--bak]"

  local zsh_config_download_url="$(get-best-remote)shells/oh-my-zsh/zshrc.zsh-template"

  if [[ "$1" == "--bak" ]]; then
    local backup_file="$HOME/.zshrc.$(date +%Y%m%d%H%M%S).bak"
    echo "Backing up current .zshrc to $backup_file..."
    cp ~/.zshrc "$backup_file"

    if [[ $? -ne 0 ]]; then
      echo "Error: Failed to create backup of .zshrc file." >&2
      return 1
    fi

    echo "Backup completed. You can restore it by running: cp $backup_file ~/.zshrc"
  fi

  echo "Upgrading oh-my-zsh configuration from remote repository..."
  echo "Using template URL: $zsh_config_download_url"

  curl -fsSL "$zsh_config_download_url" > ~/.zshrc
  if [[ $? -ne 0 ]]; then
    echo "Error: Failed to download and update .zshrc from remote repository." >&2
    return 1
  fi

  # Reload the configuration after upgrade
  source ~/.zshrc
  echo "Oh-My-Zsh configuration successfully upgraded and reloaded."
}'
